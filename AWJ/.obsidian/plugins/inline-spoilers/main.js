/*!
 * Inline Spoilers for Obsidian
 * https://github.com/logonoff/obsidian-inline-spoilers
 * SPDX-License-Identifier: GPL-3.0-or-later
 */
var u=Object.defineProperty;var T=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var A=Object.prototype.hasOwnProperty;var C=(i,t)=>{for(var o in t)u(i,o,{get:t[o],enumerable:!0})},_=(i,t,o,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let e of P(t))!A.call(i,e)&&e!==o&&u(i,e,{get:()=>t[e],enumerable:!(s=T(t,e))||s.enumerable});return i};var v=i=>_(u({},"__esModule",{value:!0}),i);var W={};C(W,{default:()=>g});module.exports=v(W);var D=require("@codemirror/language"),x=require("@codemirror/state"),c=require("@codemirror/view"),n=require("obsidian"),b=/\|\|(.+?)\|\|/g,k=i=>{if(i.nodeType===Node.TEXT_NODE){if(!i.textContent||!i.parentNode)return;let t=i.textContent.split(/(\|\|[^|]+\|\|)/g),o=document.createDocumentFragment();for(let s of t)if(b.test(s)){let e=s.slice(2,-2),l=createSpan({cls:"inline_spoilers-spoiler",text:e});o.appendChild(l)}else{let e=document.createTextNode(s);o.appendChild(e)}i.parentNode.replaceChild(o,i)}else i.nodeType===Node.ELEMENT_NODE&&Array.from(i.childNodes).forEach(k)},S=(i,t)=>{let o=i.findAll("p, li, h1, h2, h3, h4, h5, h6, blockquote, em, strong, b, i, a, th, td");for(let e of o)Array.from(e.childNodes).forEach(k);let s=i.findAll(".inline_spoilers-spoiler");for(let e of s)t.registerDomEvent(e,"click",()=>{e.classList.toggle("inline_spoilers-revealed")})},M=i=>{let t=Array.from(i.containerEl.querySelectorAll(".inline_spoilers-spoiler"));for(let o of t){let s=o.parentNode,e=document.createTextNode(`||${o.innerText}||`);s&&s.replaceChild(e,o)}},V=c.Decoration.mark({class:"inline_spoilers-editor-spoiler",tagName:"span"}),L=c.Decoration.mark({class:"inline_spoilers-editor-spoiler-delimiter",tagName:"span"}),m=class{constructor(t){this.decorations=this.buildDecorations(t)}update(t){(t.docChanged||t.viewportChanged)&&(this.decorations=this.buildDecorations(t.view))}destroy(){}buildDecorations(t){let o=new x.RangeSetBuilder,s=[];for(let{from:e,to:l}of t.visibleRanges)(0,D.syntaxTree)(t.state).iterate({from:e,to:l,enter(E){let N=t.state.sliceDoc(E.from,E.to),h;for(;(h=b.exec(N))!==null;){let a=h.index,p=a+h[0].length,w=t.state.sliceDoc(a,p);!w.startsWith("||")&&!w.endsWith("||")||(s.push({from:a,to:a+2,isDelimiter:!0}),s.push({from:a+2,to:p-2,isDelimiter:!1}),s.push({from:p-2,to:p,isDelimiter:!0}))}}});s.sort((e,l)=>e.from-l.from);for(let e of s)o.add(e.from,e.to,e.isDelimiter?L:V);return o.finish()}},R={decorations:i=>i.decorations},d=c.ViewPlugin.fromClass(m,R),r=[],O=i=>{r.includes(d)||r.push(d),i.updateOptions()},y=i=>{let t=r.indexOf(d);t!==-1&&r.splice(t,1),i.updateOptions()},I={showAllSpoilers:!1,enableEditorMode:!1},f=class extends n.PluginSettingTab{constructor(o,s){super(o,s);this.plugin=s}display(){let{containerEl:o}=this;o.empty(),new n.Setting(o).setName("Reveal all spoilers").setDesc("Always show all inline spoilers, regardless of whether they are clicked or not.").addToggle(s=>s.setValue(this.plugin.settings.showAllSpoilers).onChange(async e=>{this.plugin.settings.showAllSpoilers=e,this.app.workspace.containerEl.toggleClass("inline_spoilers-revealed",e),await this.plugin.saveSettings()})),new n.Setting(o).setName("Hide spoilers in editor view (experimental)").setDesc("Hide spoilers in the editor until your cursor is on the same line as the spoiler.").addToggle(s=>s.setValue(this.plugin.settings.enableEditorMode).onChange(async e=>{this.plugin.settings.enableEditorMode=e,e?O(this.app.workspace):y(this.app.workspace),await this.plugin.saveSettings()}))}},g=class extends n.Plugin{async onload(){await this.loadSettings();let o=this.app.workspace.containerEl.querySelector(".markdown-reading-view");o&&S(o,this),this.registerMarkdownPostProcessor(s=>{S(s,this)}),this.addCommand({id:"create-spoiler",name:"Create spoiler",editorCallback:s=>{let e=s.getSelection();s.replaceSelection(`||${e}||`)}}),this.registerEditorExtension(r),this.addSettingTab(new f(this.app,this))}onunload(){this.app.workspace.containerEl.classList.remove("inline_spoilers-revealed"),M(this.app.workspace),y(this.app.workspace)}async loadSettings(){this.settings=Object.assign({},I,await this.loadData()),this.app.workspace.containerEl.toggleClass("inline_spoilers-revealed",this.settings.showAllSpoilers),this.settings.enableEditorMode&&r.push(d)}async saveSettings(){await this.saveData(this.settings)}};

/* nosourcemap */